{"version":3,"file":"8.48afb7d89d934914ef18.hot-update.js","sources":["webpack:///pages/departuretimes.js"],"sourcesContent":["import {\n    Button,\n    Container,\n    Image, \n    Dimmer,\n    Segment,\n    Grid,\n    Icon\n} from 'semantic-ui-react'; \nimport React from 'react'\nimport Link from 'next/link'\n class PublicDomainReader extends React.Component {\n     state = {\n         activeImage:'', \n         dimmerActive: false\n     }\n    \n   \n    handleShow = (e) => {\n        console.log(e.target.name)\n        this.setState({ dimmerActive: true, activeImage: e.target.name })\n     }\n    handleHide = () => {\n        console.log('should hide')\n        this.setState({ dimmerActive: false })\n    }\n    \n    render(){\n        return(\n            <div>\n\n                <Dimmer page active={this.state.dimmerActive} onClick={this.handleHide}>\n                    <Container>\n                        <Image src={this.state.activeImage}  verticalAlign=\"top\" size=\"massive\"/>\n                    </Container>\n                </Dimmer>\n                <Container>\n                   <Segment basic>\n                    <h1>Departure Times</h1><br />\n                    <p>\n                        There is a large amount of data on the web that is accessible, but not necessarily usable. \n                        Project Gutenberg (https://www.gutenberg.org/) has been digitizing the vast body literature in the public domain since 1971. \n                        Project Gutenberg makes all the works availible in a number of digital formats, but doesn't provide a great interface for exploring \n                        or reading the materials online. This project seeks to address some of these issues using React.js, Ruby on Rails, and the Gutendex \n                        API (https://github.com/garethbjohnson/gutendex). \n                    </p> \n                    <h2>\n                        Technology: \n                        <ul>\n                            <li>React.js</li>\n                            <li>Ruby on Rails</li>\n                            <li>Gutendex API</li>\n                            <li>MYSQL</li>\n                        </ul>\n                    </h2>                      \n                    </Segment>\n                   <Grid>\n                        <Grid.Row>\n                        <Grid.Column width={8}>\n                            <Image name=\"/static/dt-gif-1.gif\" onClick={this.handleShow} src={'/static/dt-gif-1.gif'} size=\"huge\" />\n                        </Grid.Column>\n                        <Grid.Column width={8}>\n                        <p>\n                            Users can search for any place with Google Autocomplete Places API. Search results are constrained\n                            San Francisco. \n                        </p>\n                        </Grid.Column>\n                        </Grid.Row>\n\n                        <Grid.Row>\n                        <Grid.Column width={8}>\n                            <Image name=\"/static/dt-gif-2.gif\" onClick={this.handleShow} src={'/static/dt-gif-2.gif'} size=\"huge\" />\n                        </Grid.Column>\n                        <Grid.Column width={8}>\n                        <p>\n                            Google returns the coordinates of the selected place. The 311 API provides for us the coordinate location of every \n                            bus stop in California. Some <a href=\"https://en.wikipedia.org/wiki/Haversine_formula\">math</a> \n                            is used to filter out all of the stops that aren't within 0.5 miles of the selected location.\n                            The positions of the stops can be plotted on the map with google maps API. \n                        </p>\n                        </Grid.Column>\n                        </Grid.Row>\n\n                        <Grid.Row>\n                        <Grid.Column width={8}>\n                            <Image name=\"/static/dt-gif-3.gif\" onClick={this.handleShow} src={'/static/dt-gif-3.gif'} size=\"huge\" />\n                        </Grid.Column>\n                        <Grid.Column width={8}>\n                        <p>\n                            Stops are listed on the left-hand sidebar. They can be selected on the map or the sidebar. Redux is useful \n                            managing state here. \n                        </p>\n                        </Grid.Column>\n                        </Grid.Row>\n\n                         <Grid.Row>\n                        <Grid.Column width={8}>\n                            <Image name=\"/static/dt-gif-4.gif\" onClick={this.handleShow} src={'/static/dt-gif-4.gif'} size=\"huge\" />\n                        </Grid.Column>\n                        <Grid.Column width={8}>\n                         <p>\n                             Once a stop is selected, it can be polled every few seconds to get get real-time bus coordinates. \n                             The bus positions can be placed on the map.\n                         </p>\n                        </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                    <a href=\"https://github.com/gregDrizagit/DepartureTimes\">\n                        <Icon link size=\"massive\" name='github' />\n                    </a>\n                </Container>\n                <style jsx>\n                {\n                    `\n                        p, h1{\n                            font-size: larger;\n                            font-family:\"Lucida Console\", Monaco, monospace;\n                        }\n                    `\n                }\n                </style>\n            </div>\n        )\n    }\n}\n\nexport default PublicDomainReader\n\n\n// WEBPACK FOOTER //\n// pages/departuretimes.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/EA;AAAA;AAAA;AA8FA;;;;AAhHA;AACA;AAkHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}